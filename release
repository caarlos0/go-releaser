#!/bin/sh
set -e

# enables go 1.5 vendor experiment
export GO15VENDOREXPERIMENT=1

# cleanup stuff
cleanup() {
  rm -rf dist
}

# normalize Golang's OS and Arch to uname compatibles
normalize() {
  echo "$1" | sed \
    -e 's/darwin/Darwin/' \
    -e 's/linux/Linux/' \
    -e 's/freebsd/FreeBSD/' \
    -e 's/openbsd/OpenBSD/' \
    -e 's/netbsd/NetBSD/' \
    -e 's/386/i386/' \
    -e 's/amd64/x86_64/'
}

# builds the binaries with gox
build() {
  echo "Building $CURRENT..."
  go get github.com/mitchellh/gox
  gox -output="dist/{{.Dir}}_{{.OS}}_{{.Arch}}/$BINARY" \
    -os="linux darwin freebsd openbsd netbsd" \
    -arch="amd64 386" \
    -ldflags="-s -w -X main.version=$CURRENT" \
    "$MAINGO"
}

# package the binaries in .tar.gz files
package() {
  # shellcheck disable=SC2039
  local folder filename
  echo "Packaging $CURRENT..."

  for folder in ./dist/*; do
    filename="$(normalize "$folder").tar.gz"
    test -n "$EXTRA_FILES" && cp -rf "$EXTRA_FILES" "$folder"
    cp -rf README* "$folder"
    cp -rf LICENSE* "$folder"
    tar -cvzf "$filename" --directory="$folder" .
  done
}

# release it to github
release() {
  echo "Releasing $CURRENT..."
  # shellcheck disable=SC2039
  local log description
  log="$(git log --pretty=oneline --abbrev-commit "$PREVIOUS".."$CURRENT")"
  description="$(printf '%s\n\n%s' "$log" "Built with: $(go version) and caarlos0/go-releaser")"
  go get github.com/aktau/github-release
  echo "Creating release $CURRENT..."
  github-release release \
    --user "$OWNER" \
    --repo "$REPO" \
    --tag "$CURRENT" \
    --description "$description" ||
      github-release edit \
        --user "$OWNER" \
        --repo "$REPO" \
        --tag "$CURRENT" \
        --description "$description"
}

# upload all tar.gz files to the previously created release
upload() {
  # shellcheck disable=SC2039
  local file
  for file in ./dist/*.tar.gz; do
    echo "--> Uploading $file..."
    github-release upload \
      --user "$OWNER" \
      --repo "$REPO" \
      --tag "$CURRENT" \
      --name "$(echo "$file" | sed 's:\./dist/::')" \
      --file "$file"
  done
}

usage() {
  cat <<EOF
NAME:
  $0 - Builds and releases a go binary to github releases
USAGE:
  $0 [options]
OPTIONS:
  -h, --help                Shows this screen
  -u, --user, --owner       Repository owner (e.g.: caarlos0)
  -r, --repo                Repository name (e.g.: go-releaser)
  -b, --binary              Binary final name (e.g.: antibody)
  -m, --main                Path to the main golang file (e.g.: cmd/main.go)
  -e, --extra               Extra files to package: (e.g.: USAGE.md)
EOF
}

test $# -eq 0 && {
  usage
  exit 0
}

while test $# -gt 0; do
  case "$1" in
    -u|--user|--owner)
      shift
      if [ $# -gt 0 ]; then
        export OWNER="$1"
        shift
      fi
      ;;
    -r|--repo)
      shift
      if [ $# -gt 0 ]; then
        export REPO="$1"
        shift
      fi
      ;;
    -b|--binary)
      shift
      if [ $# -gt 0 ]; then
        export BINARY="$1"
        shift
      fi
      ;;
    -m|--main)
      shift
      if [ $# -gt 0 ]; then
        export MAINGO="$1"
        shift
      fi
      ;;
    -e|--extra)
      shift
      if [ $# -gt 0 ]; then
        export EXTRA_FILES="$1"
        shift
      fi
      ;;
    --help|-h)
      usage
      exit 0
      ;;
    *)
      echo "Invalid option $1. Run $0 -h for help" >&2
      exit 1
      ;;
  esac
done

test -z "$OWNER" && {
  echo "Missing owner" >&2
  exit 1
}
test -z "$REPO" && {
  echo "Missing repository" >&2
  exit 1
}
test -z "$BINARY" && {
  echo "Missing binary name" >&2
  exit 1
}
test -z "$MAINGO" && {
  echo "Missing main go file" >&2
  exit 1
}

cleanup
CURRENT="$(git describe --tags --abbrev=0)"
PREVIOUS=$(git describe --tags --abbrev=0 "$CURRENT"^)
build
package
release
upload
